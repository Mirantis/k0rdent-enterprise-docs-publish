name: Deploy Docs Consumer (Runs manually or on cron)

on:
  schedule:
    - cron: '*/15 * * * *'  # every 15 minutes
  workflow_dispatch:       # manual trigger via GitHub UI

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  dispatch:
    runs-on: ubuntu-latest

    steps:
      - name: Configure git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Checkout workflow-queue branch
        uses: actions/checkout@v4
        with:
          ref: workflow-queue
          fetch-depth: 0

      - name: Grab queue, clear, and process all branches (or exit if queue.txt is empty)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Ensure queue.txt exists even if missing
          touch queue.txt
          
          # Exit early if queue.txt is empty or contains only whitespace
          if ! grep -q '[^[:space:]]' queue.txt; then
            echo "Queue is empty. Nothing to process."
            exit 0
          fi

          # Normalize queue entries
          mapfile -t QUEUE < <(grep -v '^\s*$' queue.txt | tr -d '[:space:]')

          # Clear and push the now-empty queue.txt
          > queue.txt
          git add queue.txt
          git commit -m "Cleared queue for processing"
          git push origin workflow-queue

          # Create temp dir and clone the repo using token auth (required for private repo)
          TMPDIR=$(mktemp -d)
          echo "Working in $TMPDIR"

          # Authenticated clone of this repo using GH token
          git clone https://x-access-token:$GH_TOKEN@github.com/${{ github.repository }} "$TMPDIR"
          cd "$TMPDIR"

          for BRANCH in "${QUEUE[@]}"; do
            if ! echo "$BRANCH" | grep -Eq '^main$|^release-v[0-9]+(\.[0-9]+)*$'; then
              echo "Skipping invalid branch: $BRANCH"
              continue
            fi

            echo "=== Processing $BRANCH ==="

            if ! git checkout "$BRANCH"; then
              echo "ERROR: Branch $BRANCH doesn't exist, skipping"
              continue
            fi

            # Nuke and recreate virtual environment
            rm -rf .venv
            python3 -m venv .venv
            source .venv/bin/activate

            # Install requirements if available
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            else
              echo "No requirements.txt in $BRANCH â€” skipping pip install"
            fi

            # Prepare gh-pages tracking
            git fetch origin gh-pages || echo "gh-pages does not exist remotely"
            if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
              git branch -f gh-pages origin/gh-pages
            fi

            # Use mike to deploy the appropriate doc version
            if [[ "$BRANCH" == "main" ]]; then
              mike deploy -t "next" --update-aliases --push next head
            elif [[ "$BRANCH" == "release-v1.0.0" ]]; then
              mike deploy -t "v1.0.0 (latest)" --update-aliases --push v1.0.0 latest stable
              mike set-default --push latest
            else
              version="${BRANCH#release-}"
              mike deploy -t "$version" --update-aliases --push "$version"
            fi

            deactivate
          done

          echo "All branches processed."
